<?xml version="1.0" encoding="utf-8"?>
<mx:Window
	xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="absolute"
	width="620"
	height="300"
	type="utility"
	systemChrome="standard"
	creationComplete="onCreationComplete();"
	xmlns:flash.filters="flash.filters.*">

	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import com.adobe.exchange.events.ExchangeErrorEvent;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import com.adobe.exchange.AddressBookEntry;
			import com.adobe.exchange.Person;
			import mx.collections.ArrayCollection;
			import com.adobe.exchange.events.ExchangeContactListEvent;
			import com.adobe.lineup.model.ModelLocator;
			import com.adobe.exchange.AddressBook;

			[Bindable] private var busy:Boolean = false;

			[Bindable]
            [Embed(source="assets/progressCircle.swf",symbol="progressCircle")]
            private var progressCircle:Class;

			[Bindable] private var contactsDP:ArrayCollection;
			private var addressBook:AddressBook;
			
			private var lastOpened:Object;
			
			private function onCreationComplete():void
			{
				this.contactsDP = new ArrayCollection();
				var ml:ModelLocator = ModelLocator.getInstance();
				this.addressBook = new AddressBook();
				this.addressBook.requestConfig = ml.requestConfig;
				this.addressBook.addEventListener(ExchangeContactListEvent.EXCHANGE_CONTACT_LIST_EVENT, onContactList);
				this.addressBook.addEventListener(ExchangeErrorEvent.EXCHANGE_ERROR_EVENT, onError);
				this.busy = true;
				this.addressBook.getContacts();
			}
			
			private function onError(e:ExchangeErrorEvent):void
			{
				this.busy = false;
				Alert.show(e.message, "Exchange Error");
			}
			
			private function onContactList(e:ExchangeContactListEvent):void
			{
				for each (var entry:AddressBookEntry in e.entries)
				{
					var person:Person = entry.contact;
					var o:Object = new Object();
					o.href = entry.href;
					if (!entry.isFolder && person != null)
					{
						if (person.fullName != null)
						{
							o.label = person.fullName;
						}
						else if (person.organization != null)
						{
							o.label = person.organization;
						}
						else
						{
							continue;
						}
						o.data = person;
					}
					else
					{
						o.label = entry.folderName;
						o.children = new ArrayCollection();
					}
					
					if (this.lastOpened == null)
					{
						this.contactsDP.addItem(o);
					}
					else
					{
						this.lastOpened.children.addItem(o);
					}
				}
				
				this.busy = false;
				
				if (this.lastOpened != null)
				{
					this.contactsTree.expandItem(this.lastOpened, true, true, false);
				}
			}
			
			private function onItemOpening(e:TreeEvent):void
			{
				if (!e.opening || e.item.children == null) return;
				var children:ArrayCollection = e.item.children as ArrayCollection;
				if (children.length > 0) return;
				e.preventDefault();
				this.lastOpened = e.item;
				this.busy = true;
				this.addressBook.getContacts(e.item.label);
			}
			
			private function onChange(e:ListEvent):void
			{
				if (this.contactsTree.selectedItem == null || this.contactsTree.selectedItem.children != null) return;
				var item:Person = this.contactsTree.selectedItem.data as Person;
				this.fullName.text = (item.fullName == null) ? "" : item.fullName;
				this.organization.text = (item.organization == null) ? "" : item.organization;
				this.personTitle.text = (item.title == null) ? "" : item.title;
				this.emailAddress.text = (item.emailAddress == null) ? "" : item.emailAddress;
				this.phoneNumber.text = (item.telephoneNumber == null) ? "" : item.telephoneNumber;
				var homeAddressTmp:String = item.homeAddress;
				if (homeAddressTmp != null)
				{
					homeAddressTmp = homeAddressTmp.replace(/\n/, "");
					this.homeAddress.text = homeAddressTmp;
				}
				else
				{
					this.homeAddress.text = "";
				}
				var workAddressTmp:String = item.workAddress;
				if (workAddressTmp != null)
				{
					workAddressTmp = workAddressTmp.replace(/\n/, "");
					this.workAddress.text = workAddressTmp;
				}
				else
				{
					this.workAddress.text = "";
				}
			}
		]]>
	</mx:Script>

	<mx:HDividedBox width="100%" height="100%" styleName="contactDetailForm">
		<mx:Tree width="220" height="100%" id="contactsTree" dataProvider="{contactsDP}" itemOpening="onItemOpening(event);" change="onChange(event);" styleName="contactTree"/>
		<mx:Grid width="100%" height="100%">
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Name" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:Label id="fullName"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Organization" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:Label id="organization"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Title" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:Label id="personTitle"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Email" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:Label id="emailAddress"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Phone Number" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:Label id="phoneNumber"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Home Address" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:TextArea id="homeAddress" height="60" width="200" editable="false"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow>
				<mx:GridItem horizontalAlign="right">
					<mx:Label text="Work Address" fontWeight="bold" color="#555555"/>
				</mx:GridItem>
				<mx:GridItem>
					<mx:TextArea id="workAddress" height="60" width="200" editable="false"/>
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
	</mx:HDividedBox>
	
	<mx:Canvas width="100%" height="100%" visible="{busy}" backgroundAlpha=".50" backgroundColor="0x000000">
		<mx:SWFLoader source="{progressCircle}" height="150" width="150" x="{(this.width/2)-75}" y="{(this.height/2)-75}" alpha=".50"/>
	</mx:Canvas>
	
</mx:Window>